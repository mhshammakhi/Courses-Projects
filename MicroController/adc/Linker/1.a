;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.3 Standard
;Automatic Program Generator
;© Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 5/20/2013
;Author  : mh
;Company :
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#include <delay.h>
;
;#define ADC_VREF_TYPE 0x60
;int x=0,y=0,den,num;
;char a[2],f;
;float phase;
;
;interrupt [TIM2_OVF] void timer2_ovf_isr(void)
; 0000 0022 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0023 f++;
;PCODE: $0000000F VOL: 0
; 0000 0024 
; 0000 0025 }
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;
;// ADC interrupt service routine
;interrupt [ADC_INT] void adc_isr(void)
; 0000 0029 {
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 002A unsigned char adc_data;
; 0000 002B // Read the 8 most significant bits
; 0000 002C // of the AD conversion result
; 0000 002D adc_data=ADCH;
;PCODE: $00000015 VOL: 0
;	adc_data -> R17
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 002E 
; 0000 002F 
; 0000 0030 if (x==0)
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0031 a[0]=ADCH;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0032 else if (x==1)
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0033 a[1]=ADCH;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0034 
; 0000 0035 if(a[0]==0xff&x==0)
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0036     {
; 0000 0037     if (y==1)
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0038         {
; 0000 0039         den=f*200+TCNT0;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 003A         f=0;
;PCODE: $0000003B VOL: 0
; 0000 003B         TCNT2=0;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 003C         x=1;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 003D         y=2;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 003E         ADMUX=0x41;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 003F         }
; 0000 0040     else if(y==0)
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0041         {
; 0000 0042         y=1;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0043         TCCR2=0x0A;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0044         TCNT2=0x00;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0045         OCR2=0xC8;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0046         }
; 0000 0047     }
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0048 
; 0000 0049 if (a[1]==0xff&x==1)
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 004A     {
; 0000 004B      num=TCNT2+f*200;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 004C      phase=num/den;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 004D      x=2;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 004E     }
; 0000 004F // Place your code here
; 0000 0050 PORTB=a[0];
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0051 PORTC=a[1];
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0052 }
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;
;// Declare your global variables here
;
;void main(void)
; 0000 0057 {
;PCODE: $00000077 VOL: 0
; 0000 0058 // Declare your local variables here
; 0000 0059 
; 0000 005A // Input/Output Ports initialization
; 0000 005B // Port A initialization
; 0000 005C // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 005D // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 005E PORTA=0x00;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 005F DDRA=0x00;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0060 
; 0000 0061 // Port B initialization
; 0000 0062 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0063 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0064 PORTB=0x00;
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0065 DDRB=0xff;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0066 
; 0000 0067 // Port C initialization
; 0000 0068 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0069 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 006A PORTC=0x00;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 006B DDRC=0xff;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 006C 
; 0000 006D // Port D initialization
; 0000 006E // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 006F // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0070 PORTD=0x00;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 0071 DDRD=0x00;
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0072 
; 0000 0073 // Timer/Counter 0 initialization
; 0000 0074 // Clock source: System Clock
; 0000 0075 // Clock value: Timer 0 Stopped
; 0000 0076 // Mode: Normal top=0xFF
; 0000 0077 // OC0 output: Disconnected
; 0000 0078 TCCR0=0x00;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 0079 TCNT0=0x00;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 007A OCR0=0x00;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 007B 
; 0000 007C // Timer/Counter 1 initialization
; 0000 007D // Clock source: System Clock
; 0000 007E // Clock value: Timer1 Stopped
; 0000 007F // Mode: Normal top=0xFFFF
; 0000 0080 // OC1A output: Discon.
; 0000 0081 // OC1B output: Discon.
; 0000 0082 // Noise Canceler: Off
; 0000 0083 // Input Capture on Falling Edge
; 0000 0084 // Timer1 Overflow Interrupt: Off
; 0000 0085 // Input Capture Interrupt: Off
; 0000 0086 // Compare A Match Interrupt: Off
; 0000 0087 // Compare B Match Interrupt: Off
; 0000 0088 TCCR1A=0x00;
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 0089 TCCR1B=0x00;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 008A TCNT1H=0x00;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 008B TCNT1L=0x00;
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 008C ICR1H=0x00;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 008D ICR1L=0x00;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 008E OCR1AH=0x00;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 008F OCR1AL=0x00;
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 0090 OCR1BH=0x00;
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 0091 OCR1BL=0x00;
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 0092 
; 0000 0093 // Timer/Counter 2 initialization
; 0000 0094 // Clock source: System Clock
; 0000 0095 // Clock value: Timer2 Stopped
; 0000 0096 // Mode: Normal top=0xFF
; 0000 0097 // OC2 output: Disconnected
; 0000 0098 ASSR=0x00;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 0099 TCCR2=0x00;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 009A TCNT2=0x00;
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 009B OCR2=0x00;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 009C 
; 0000 009D // External Interrupt(s) initialization
; 0000 009E // INT0: Off
; 0000 009F // INT1: Off
; 0000 00A0 // INT2: Off
; 0000 00A1 MCUCR=0x00;
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 00A2 MCUCSR=0x00;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 00A3 
; 0000 00A4 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00A5 TIMSK=0x00;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 00A6 
; 0000 00A7 // USART initialization
; 0000 00A8 // USART disabled
; 0000 00A9 UCSRB=0x00;
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 00AA 
; 0000 00AB // Analog Comparator initialization
; 0000 00AC // Analog Comparator: Off
; 0000 00AD // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 00AE ACSR=0x80;
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 00AF SFIOR=0x00;
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 00B0 
; 0000 00B1 // ADC initialization
; 0000 00B2 // ADC Clock frequency: 1000.000 kHz
; 0000 00B3 // ADC Voltage Reference: AVCC pin
; 0000 00B4 // ADC Auto Trigger Source: Free Running
; 0000 00B5 // Only the 8 most significant bits of
; 0000 00B6 // the AD conversion result are used
; 0000 00B7 ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 00B8 ADCSRA=0xAB;
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 00B9 SFIOR&=0x1F;
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00BA 
; 0000 00BB // SPI initialization
; 0000 00BC // SPI disabled
; 0000 00BD SPCR=0x00;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 00BE 
; 0000 00BF // TWI initialization
; 0000 00C0 // TWI disabled
; 0000 00C1 TWCR=0x00;
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 00C2 
; 0000 00C3 // Global enable interrupts
; 0000 00C4 #asm("sei")
;PCODE: $000000C1 VOL: 0
	sei
;PCODE: $000000C2 VOL: 0
; 0000 00C5 
; 0000 00C6 while (1)
;PCODE: $000000C3 VOL: 0
; 0000 00C7       {
; 0000 00C8       // Place your code here
; 0000 00C9 
; 0000 00CA       }
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 00CB }
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
