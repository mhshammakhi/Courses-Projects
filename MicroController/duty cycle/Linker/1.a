;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.3 Standard
;Automatic Program Generator
;© Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 6/13/2013
;Author  : mh
;Company :
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#include <delay.h>
;char a,b,m,x;
;#define ADC_VREF_TYPE 0x00
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0020 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0021 // Place your code here
; 0000 0022 x++;
;PCODE: $0000000F VOL: 0
; 0000 0023 if (x==40) {x=0;if(m==0) m=1;
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0024            else if(m==1) m=0;}
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0025 if (a==100) m=1;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0026 if (a==0) m=0;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0027 PORTA.7=m;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0028 
; 0000 0029 }
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 002D {
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 002E ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;PCODE: $0000003A VOL: 0
;	adc_input -> Y+0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 002F // Delay needed for the stabilization of the ADC input voltage
; 0000 0030 delay_us(10);
;PCODE: $0000003E VOL: 0
; 0000 0031 // Start the AD conversion
; 0000 0032 ADCSRA|=0x40;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0033 // Wait for the AD conversion to complete
; 0000 0034 while ((ADCSRA & 0x10)==0);
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0035 ADCSRA|=0x10;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0036 return ADCW;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0037 }
;PCODE: $0000004C VOL: 0
;
;
;void main(void)
; 0000 003B {
;PCODE: $0000004D VOL: 0
; 0000 003C // Declare your local variables here
; 0000 003D 
; 0000 003E // Input/Output Ports initialization
; 0000 003F // Port A initialization
; 0000 0040 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0041 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0042 DDRA=0x80;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0043 TCNT0=0x00;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0044 
; 0000 0045 // External Interrupt(s) initialization
; 0000 0046 // INT0: Off
; 0000 0047 // INT1: Off
; 0000 0048 // INT2: Off
; 0000 0049 MCUCR=0x00;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 004A MCUCSR=0x00;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 004B 
; 0000 004C // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 004D TIMSK=0x01;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 004E 
; 0000 004F // USART initialization
; 0000 0050 // USART disabled
; 0000 0051 UCSRB=0x00;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0052 
; 0000 0053 // Analog Comparator initialization
; 0000 0054 // Analog Comparator: Off
; 0000 0055 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 0056 ACSR=0x80;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0057 SFIOR=0x00;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0058 
; 0000 0059 // ADC initialization
; 0000 005A // ADC Clock frequency: 1000.000 kHz
; 0000 005B // ADC Voltage Reference: AREF pin
; 0000 005C // ADC Auto Trigger Source: ADC Stopped
; 0000 005D ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 005E ADCSRA=0x83;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 005F 
; 0000 0060 // SPI initialization
; 0000 0061 // SPI disabled
; 0000 0062 SPCR=0x00;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0063 
; 0000 0064 // TWI initialization
; 0000 0065 // TWI disabled
; 0000 0066 TWCR=0x00;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0067 #asm("sei")
;PCODE: $00000066 VOL: 0
	sei
;PCODE: $00000067 VOL: 0
; 0000 0068 while (1)
;PCODE: $00000068 VOL: 0
; 0000 0069       {
; 0000 006A       read_adc(0);
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 006B       if(ADCW<0xCE)
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 006C       {
; 0000 006D       a=ADCW/2;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 006E       if (a>=25) a--;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 006F       if (a>=62) a--;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0070       b=100-a;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0071       TCCR0=0x0D;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0072 
; 0000 0073       if (m==0) {OCR0=b;}
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0074       if (m==1) {OCR0=a;}
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 0075       }
;PCODE: $0000008A VOL: 0
; 0000 0076       else
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 0077       {a=100;b=0;}
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0078 
; 0000 0079 
; 0000 007A       }
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 007B }
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
