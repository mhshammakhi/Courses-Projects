;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.04.4a Advanced
;Automatic Program Generator
;© Copyright 1998-2009 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 13/05/2013
;Author  : NeVaDa
;Company :
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 4.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Alphanumeric LCD Module functions
;#asm
;PCODE: $0000000D VOL: 0
   .equ __lcd_port=0x1B ;PORTA
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 001D #endasm
;#include <lcd.h>
;
;// Declare your global variables here
;flash char key[4][4]={{'c','0','=','+'},{'1','2','3','-'},{'4','5','6','*'},{'7','8','9','/'}};
;flash char row[]={0xfe,0xfd,0xfb,0xf7};
;unsigned char x,ac,table;
;unsigned int r,a=0,b=0;
;
;void keypad()
; 0000 0027  {

	.CSEG
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0028  PORTB=0xff;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0029  DDRB=0x0f;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 002A  lcd_gotoxy(a,b);
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 002B     while (1)
;PCODE: $00000019 VOL: 0
; 0000 002C     {
; 0000 002D     for(r=0;r<=4;r++)
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 002E      {
; 0000 002F      ac=4;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0030      PORTB=row[r];
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0031      DDRB=0x0f;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0032      if (PINB.4==0)
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0033      ac=0;
;PCODE: $0000002E VOL: 0
; 0000 0034      if (PINB.4==0)
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0035      ac=1;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0036      if (PINB.4==0)
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0037      ac=2;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0038      if (PINB.4==0)
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0039      ac=3;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 003A       if(!(ac==4))
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 003B        {
; 0000 003C        table=key[r][ac];
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 003D        lcd_putchar(table);
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 003E        a++;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 003F        }
; 0000 0040       while (PORTB.4==0) {}
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0041       while (PORTB.5==0) {}
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0042       while (PORTB.6==0) {}
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0043       while (PORTB.7==0) {}
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0044       }
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0045      }
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0046      }
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;
;void main(void)
; 0000 0049 {
;PCODE: $00000075 VOL: 0
; 0000 004A // Input/Output Ports initialization
; 0000 004B // Port A initialization
; 0000 004C // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 004D // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 004E PORTA=0x00;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 004F DDRA=0x00;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0050 
; 0000 0051 
; 0000 0052 // Port C initialization
; 0000 0053 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0054 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0055 PORTC=0x00;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0056 DDRC=0x00;
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0057 
; 0000 0058 // Port D initialization
; 0000 0059 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 005A // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 005B PORTD=0x00;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 005C DDRD=0x00;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 005D 
; 0000 005E // Timer/Counter 0 initialization
; 0000 005F // Clock source: System Clock
; 0000 0060 // Clock value: Timer 0 Stopped
; 0000 0061 // Mode: Normal top=FFh
; 0000 0062 // OC0 output: Disconnected
; 0000 0063 TCCR0=0x00;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0064 TCNT0=0x00;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 0065 OCR0=0x00;
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0066 
; 0000 0067 // Timer/Counter 2 initialization
; 0000 0068 // Clock source: System Clock
; 0000 0069 // Clock value: Timer2 Stopped
; 0000 006A // Mode: Normal top=FFh
; 0000 006B // OC2 output: Disconnected
; 0000 006C ASSR=0x00;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 006D TCCR2=0x00;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 006E TCNT2=0x00;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 006F OCR2=0x00;
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 0070 
; 0000 0071 // External Interrupt(s) initialization
; 0000 0072 // INT0: Off
; 0000 0073 // INT1: Off
; 0000 0074 // INT2: Off
; 0000 0075 MCUCR=0x00;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 0076 MCUCSR=0x00;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 0077 
; 0000 0078 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0079 TIMSK=0x00;
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 007A 
; 0000 007B // Analog Comparator initialization
; 0000 007C // Analog Comparator: Off
; 0000 007D // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 007E ACSR=0x80;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 007F SFIOR=0x00;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0080 
; 0000 0081 // LCD module initialization
; 0000 0082 
; 0000 0083 while (1)
;PCODE: $0000009A VOL: 0
; 0000 0084       {
; 0000 0085 PORTB=0x0f;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 0086 DDRB=0x0f;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 0087 x=PINB;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 0088 if (x!=0)
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 0089 keypad();
;PCODE: $000000A3 VOL: 0
; 0000 008A 
; 0000 008B       };
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 008C }
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
